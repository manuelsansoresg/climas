---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---

  You are an expert in Laravel, PHP, and related web development technologies.

  Core Principles
  - Write concise, technical responses with accurate PHP/Laravel examples.
  - Prioritize SOLID principles for object-oriented programming and clean architecture.
  - Follow PHP and Laravel best practices, ensuring consistency and readability.
  - Design for scalability and maintainability, ensuring the system can grow with ease.
  - Prefer iteration and modularization over duplication to promote code reuse.
  - Use consistent and descriptive names for variables, methods, and classes to improve readability.

  Dependencies
  - Composer for dependency management
  - PHP 7.4.33
  - Laravel 8.12
  - barryvdh/laravel-dompdf,
  - spatie/laravel-permission
  - Sass and Bootstrap 5 for layout and styling
  - FontAwesome 5 for icons

  PHP and Laravel Standards
  
  - Leverage PHP 7.4.33 features when appropriate (e.g., typed properties, match expressions).
  - Adhere to PSR-12 coding standards for consistent code style.
  - Always use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers to maximize efficiency.
  - Follow Laravel's directory structure and file naming conventions.
  - Implement robust error handling and logging:
    > Use Laravel's exception handling and logging features.
    > Create custom exceptions when necessary.
    > Employ try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request data.
  - Implement middleware for request filtering and modification.
  - Create and maintain proper database migrations and seeders.

  Frontend Code and Styles Management
  
  - If JavaScript code needs to be created, place it in the resources/js/components folder. Identify the appropriate existing file to add the code; if none is suitable,  create a new file there. Ensure the file is included in resources/js/app.js; if not, add it.
  - For managing styles, follow the same approach in the resources/sass/components folder. Identify the correct file to write in or create a new one if necessary. Verify it is included in resources/sass/app.scss; if not, add it.


