/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/components/cart.js":
/*!*****************************************!*\
  !*** ./resources/js/components/cart.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Funcionalidad para agregar al carrito\n  var btn = document.getElementById('add-to-cart-btn');\n  if (btn) {\n    var quantityInput = document.getElementById('quantity');\n    var stockDisplay = document.getElementById('stock-display');\n    var availableStock = parseInt(btn.getAttribute('data-stock') || '0');\n\n    // Actualizar el display de stock si existe\n    if (stockDisplay) {\n      stockDisplay.textContent = \"Stock disponible: \".concat(availableStock);\n    }\n\n    // Validar cantidad al cambiar el input\n    if (quantityInput) {\n      quantityInput.addEventListener('input', function () {\n        var value = parseInt(this.value);\n        if (value > availableStock) {\n          this.value = availableStock;\n          value = availableStock;\n        }\n        if (value < 1 || isNaN(value)) {\n          this.value = 1;\n        }\n      });\n    }\n    btn.addEventListener('click', function () {\n      var productId = btn.getAttribute('data-product-id');\n      var url = btn.getAttribute('data-url');\n      var csrfToken = btn.getAttribute('data-csrf');\n      var quantity = parseInt((quantityInput === null || quantityInput === void 0 ? void 0 : quantityInput.value) || '1');\n\n      // Validar stock en backend antes de agregar\n      fetch(\"/api/product/\".concat(productId, \"/stock\")).then(function (res) {\n        return res.json();\n      }).then(function (stockData) {\n        availableStock = parseInt(stockData.stock);\n        btn.setAttribute('data-stock', availableStock);\n        if (stockDisplay) {\n          stockDisplay.textContent = \"Stock disponible: \".concat(availableStock);\n        }\n        quantityInput.max = availableStock;\n        if (quantity > availableStock) {\n          alert(\"Error: Solo hay \".concat(availableStock, \" unidades disponibles\"));\n          quantityInput.value = availableStock > 0 ? availableStock : 1;\n          return;\n        }\n\n        // Mostrar indicador de carga\n        btn.disabled = true;\n        btn.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Agregando...';\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRF-TOKEN': csrfToken\n          },\n          body: JSON.stringify({\n            product_id: productId,\n            quantity: quantity\n          })\n        }).then(function (response) {\n          if (!response.ok) {\n            return response.json().then(function (err) {\n              return Promise.reject(err);\n            });\n          }\n          return response.json();\n        }).then(function (data) {\n          // Restaurar el botón\n          btn.disabled = false;\n          btn.innerHTML = 'Agregar al carrito';\n\n          // Mostrar mensaje de éxito o advertencia\n          var alertDiv = document.createElement('div');\n          if (data.message && data.message.includes('ya fue agregado')) {\n            alertDiv.className = 'alert alert-warning alert-dismissible fade show';\n          } else {\n            alertDiv.className = 'alert alert-success alert-dismissible fade show';\n          }\n          alertDiv.innerHTML = \"\\n                            \".concat(data.message, \"\\n                            <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n                        \");\n          var container = document.querySelector('.container');\n          var card = document.querySelector('.card');\n          if (container) {\n            if (card && card.parentNode === container) {\n              container.insertBefore(alertDiv, card);\n            } else {\n              container.insertBefore(alertDiv, container.firstChild);\n            }\n          }\n\n          // Redirigir si es necesario\n          if (data.redirect) {\n            window.location.href = data.redirect;\n          }\n        })[\"catch\"](function (error) {\n          // Restaurar el botón\n          btn.disabled = false;\n          btn.innerHTML = 'Agregar al carrito';\n\n          // Mostrar mensaje de error\n          var alertDiv = document.createElement('div');\n          alertDiv.className = 'alert alert-danger alert-dismissible fade show';\n          alertDiv.innerHTML = \"\\n                            \".concat(error.message || 'Error al agregar al carrito', \"\\n                            <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n                        \");\n          var container = document.querySelector('.container');\n          var card = document.querySelector('.card');\n          if (container) {\n            if (card && card.parentNode === container) {\n              container.insertBefore(alertDiv, card);\n            } else {\n              container.insertBefore(alertDiv, container.firstChild);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  // Funcionalidad para validar cantidad en el carrito\n  var quantityForms = document.querySelectorAll('.quantity-form');\n  quantityForms.forEach(function (form) {\n    var input = form.querySelector('.quantity-input');\n    var updateBtn = form.querySelector('.update-btn');\n    var stockBadge = form.querySelector('.stock-badge');\n    var stockWarning = form.querySelector('.stock-warning');\n    var stockValue = form.querySelector('.stock-value');\n    var maxStock = parseInt(input.getAttribute('data-current-stock'));\n    var productId = input.getAttribute('data-product-id');\n    function updateStockUI(stock) {\n      maxStock = parseInt(stock);\n      input.setAttribute('data-current-stock', maxStock);\n      input.max = maxStock;\n      if (isNaN(maxStock) || maxStock < 1) {\n        stockValue.textContent = 'Sin stock';\n        stockBadge.classList.remove('bg-secondary', 'bg-danger');\n        stockBadge.classList.add('bg-dark', 'text-white');\n        input.disabled = true;\n        updateBtn.disabled = true;\n        stockWarning.classList.add('d-none');\n        return;\n      }\n      stockValue.textContent = maxStock;\n      input.disabled = false;\n      var value = parseInt(input.value);\n      if (value > maxStock) {\n        input.value = maxStock;\n        stockBadge.classList.remove('bg-secondary');\n        stockBadge.classList.add('bg-danger');\n        stockBadge.classList.add('text-white');\n        stockWarning.classList.remove('d-none');\n        updateBtn.disabled = true;\n      } else {\n        stockBadge.classList.remove('bg-danger');\n        stockBadge.classList.add('bg-secondary');\n        stockBadge.classList.add('text-white');\n        stockWarning.classList.add('d-none');\n        updateBtn.disabled = false;\n      }\n    }\n\n    // Validar al cargar\n    updateStockUI(maxStock);\n    // Validar y consultar stock en cada cambio\n    input.addEventListener('input', function () {\n      fetch(\"/api/product/\".concat(productId, \"/stock\")).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        updateStockUI(data.stock);\n      });\n    });\n  });\n\n  // Validar stock de todo el carrito antes de checkout\n  var checkoutForm = document.getElementById('cart-checkout-form');\n  if (checkoutForm) {\n    checkoutForm.addEventListener('submit', function (e) {\n      e.preventDefault();\n      fetch('/api/cart/validate-stock', {\n        method: 'POST',\n        headers: {\n          'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content'),\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      }).then(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(res) {\n          var data;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (res.ok) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 3;\n                return res.json();\n              case 3:\n                data = _context.sent;\n                throw data;\n              case 5:\n                return _context.abrupt(\"return\", res.json());\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).then(function (data) {\n        // Si todo ok, enviar el formulario\n        checkoutForm.submit();\n      })[\"catch\"](function (error) {\n        // Mostrar errores y actualizar stocks\n        if (error && error.errors) {\n          error.errors.forEach(function (err) {\n            var form = document.querySelector(\"form[action*=\\\"/cart/item/\".concat(err.item_id, \"/update\\\"]\"));\n            if (form) {\n              var stockValue = form.querySelector('.stock-value');\n              var stockBadge = form.querySelector('.stock-badge');\n              stockValue.textContent = err.available > 0 ? err.available : 'Sin stock';\n              if (err.available < 1) {\n                stockBadge.classList.remove('bg-secondary', 'bg-danger');\n                stockBadge.classList.add('bg-dark', 'text-white');\n              } else {\n                stockBadge.classList.remove('bg-secondary');\n                stockBadge.classList.add('bg-danger', 'text-white');\n              }\n              var input = form.querySelector('.quantity-input');\n              input.value = err.available > 0 ? err.available : 1;\n              input.max = err.available;\n              input.disabled = err.available < 1;\n              var updateBtn = form.querySelector('.update-btn');\n              updateBtn.disabled = true;\n              var stockWarning = form.querySelector('.stock-warning');\n              stockWarning.classList.remove('d-none');\n              stockWarning.textContent = \"La cantidad solicitada excede el stock disponible (\".concat(err.available, \")\");\n            }\n          });\n          // Mostrar alerta general\n          var container = document.querySelector('.container');\n          var card = document.querySelector('.card');\n          var alertDiv = document.createElement('div');\n          alertDiv.className = 'alert alert-danger alert-dismissible fade show';\n          alertDiv.innerHTML = \"\\n                        Algunos productos no tienen suficiente stock. Por favor revisa las cantidades.<button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n                    \";\n          if (container) {\n            if (card && card.parentNode === container) {\n              container.insertBefore(alertDiv, card);\n            } else {\n              container.insertBefore(alertDiv, container.firstChild);\n            }\n          }\n        }\n      });\n    });\n  }\n\n  // Funcionalidad para cerrar alertas\n  document.querySelectorAll('.alert .close-btn, .alert .btn-close').forEach(function (btn) {\n    btn.addEventListener('click', function () {\n      this.closest('.alert').style.display = 'none';\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/components/cart.js\n");

/***/ }),

/***/ "./resources/js/principal.js":
/*!***********************************!*\
  !*** ./resources/js/principal.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! ./components/cart */ \"./resources/js/components/cart.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcHJpbmNpcGFsLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxtQkFBTyxDQUFDLDREQUFtQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3ByaW5jaXBhbC5qcz8yZjY4Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vY29tcG9uZW50cy9jYXJ0Jyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/principal.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/principal.js");
/******/ 	
/******/ })()
;